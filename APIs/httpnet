------------------------------------------------
--  HTTPNet API
--  By PixelToast
--
--  TODO:
--    clean up
--    comments
------------------------------------------------

------------------------------------------------
--  eroutine API
------------------------------------------------

local eroutine=eroutine
if not eroutine then
	eroutine={}
	eroutine.routines={}
	eroutine.filters={}
	local ate=false
	local oldyield=coroutine.yield
	local str_sub=string.sub
	local pcall=pcall
	local id=os.getComputerID()
	function eroutine.eatEvent()
		ate=true
	end
	function coroutine.yield(filter)
		while true do
			local p={oldyield()}
			ate=false
			for k,v in pairs(eroutine.routines) do
				local f=eroutine.filters[k]
				if f==p or not f then
					local a,b=pcall(v,unpack(p))
					if not a then
						eroutine.routines[k]=nil
						error(b,2)
					end
				end
			end
			local fe=p[1]
			if not ate and (fe==filter or fe=="terminate" or not filter) then
				return unpack(p)
			end
		end
	end
	function eroutine.add(func,name,filter)
		local n=name or func
		eroutine.routines[n]=func
		eroutine.filters[n]=filter
		return n
	end
	function eroutine.remove(name)
		eroutine.routines[name]=nil
		eroutine.filters[name]=nil
	end
end

------------------------------------------------
-- main API
------------------------------------------------

local function serialize(...)
	local t={...}
	local out=""
	for k,v in pairs(t) do
		v=tostring(v)
		for c in v:gmatch(".") do
			if c=="\\" then
				out=out.."\\\\"
			elseif c=="," then
				out=out.."\\,"
			else
				out=out..c
			end
		end
		if k~=#t then
			out=out..","
		end
	end
	return out
end
local function unserialize(t)
	local elevel=0
	local out={}
	local s=""
	for char in t:gmatch(".") do
		if char=="\\" then
			if clevel==0 then
				clevel=1
			else
				s=s.."\\"
				clevel=0
			end
		elseif char=="," then
			if clevel==0 then
				table.insert(out,s)
				s=""
			else
				s=s..","
				clevel=0
			end
		else
			s=s..char
			clevel=0
		end
	end
	table.insert(out,s)
	return out
end
local cl={}
local qt={}
local function receive(self)
	local o={}
	local cnt=0
	for k,v in pairs(self.isOpen) do
		cnt=cnt+1
		o[cnt]=k
	end
	http.request(self.host.."receive?"..serialize(self.uid),serialize(unpack(o)))
end
local f={
	get=function(self,timeout)
		local timer
		if timeout then
			timer=os.startTimer(timeout)
		end
		while true do
			local p={os.pullEvent()}
			if p[1]=="httpnet_message" and p[4]==self then
				return p[2],p[3]
			elseif p[1]=="timer" and p[2]==timer then
				return
			end
		end
	end,
	transmit=function(self,sid,id,data)
		http.request(self.host.."send",serialize(sid,id,data))
	end,
	send=function(self,sid,data)
		http.request(self.host.."send",serialize(sid,self.id,data))
	end,
	exit=function(self)
		http.request(self.host.."exit",serialize(self.uid))
		qt[self]=true
		while true do
			local p={os.pullEvent("httpnet_exit")}
			if p[2]==self then
				break
			end
		end
	end,
	open=function(self,...)
		local t={...}
		local isOpen=self.isOpen
		local channel=self.channel
		local req=#channel==0
		for k,v in pairs(t) do
			v=tostring(v)
			if not isOpen[v] then
				isOpen[v]=true
			end
		end
		if req then
			receive(self)
		else
			http.request(self.host.."open",serialize(self.uid,...))
		end
	end,
	close=function(self,...)
		local t={...}
		local isOpen=self.isOpen
		local channel=self.channel
		for k,v in pairs(t) do
			v=tostring(v)
			isOpen[v]=nil
		end
		http.request(self.host.."close",serialize(self.uid,...))
	end,
	closeAll=function(self)
		for k,v in pairs(isOpen) do
			isOpen[k]=nil
		end
		http.request(self.host.."close",serialize(self.uid))
	end,
}
function new(h,p,i)
	local host="http://"..tostring(h or "localhost")..":"..tostring(p or 1337).."/"
	local s=http.get(shost.."ping")
	local uid
	if s then
		local t=unserialize(s.readAll())
		if t then
			if t[1]~="pong" or not t[2] then
				return false
			end
			uid=t[2]
		else
			return false
		end
	else
		return false
	end
	local o={
		host=host,
		isOpen={},
		uid=uid,
		id=i or os.getComputerID(),
	}
	for k,v in pairs(f) do
		o[k]=v
	end
	return o
end
eroutine.add(function(...)
	local p={...}
	if p[1]=="http_success" then
		if host then
			if string.sub(p[2],1,#host)==host then
				eroutine.eatEvent()
				local text=p[3].readAll()
				if text~="" then
					local t=unserialize(text)
					if t[1]==uid then
						if t[2]=="msg" then
							os.queueEvent("httpnet_message",t[3],t[4])
							receive()
						elseif t[2]=="timeout" then
							receive()
						end
					end
				end
			end
		end
	elseif p[1]=="http_failure" then
		if host then
			if string.sub(p[2],1,#host)==host then
				eroutine.eatEvent()
			end
		end
	end
end,"httpnet")

--[[
local host
local id
local uid
function send(sid,data)
	http.request(host.."send",serialize(id,sid,data))
end
function get(timeout)
	local timer
	if timeout then
		timer=os.startTimer(timeout)
	end
	while true do
		local p={os.pullEvent()}
		if p[1]=="httpnet_message" then
			return p[2],p[3]
		elseif p[1]=="timer" and p[2]==timer then
			return
		end
	end
end
function close()
	host,id=nil
end
local function receive()
	http.request(host.."receive?"..uid,serialize(id))
end
function setHost(h,p,i)
	close()
	local shost="http://"..tostring(h or "localhost")..":"..tostring(p or 1337).."/"
	local sid=tostring(i or os.getComputerID())
	local s=http.get(shost.."ping")
	if s then
		local t=unserialize(s.readAll())
		if t then
			if t[1]=="pong" and t[2] then
				host=shost
				id=sid
				uid=t[2]
				receive()
				return true
			end
		end
	end
	close()
	return false
end
eroutine.add(function(...)
	local p={...}
	if p[1]=="http_success" then
		if host then
			if string.sub(p[2],1,#host)==host then
				eroutine.eatEvent()
				local text=p[3].readAll()
				if text~="" then
					local t=unserialize(text)
					if t[1]==uid then
						if t[2]=="msg" then
							os.queueEvent("httpnet_message",t[3],t[4])
							receive()
						elseif t[2]=="timeout" then
							receive()
						end
					end
				end
			end
		end
	elseif p[1]=="http_failure" then
		if host then
			if string.sub(p[2],1,#host)==host then
				eroutine.eatEvent()
			end
		end
	end
end,"httpnet")
]]