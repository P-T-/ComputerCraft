do
	local hex={"01","02","03","04","05","06","07","08","09","0A","0B","0C","0D","0E","0F","10","11","12","13","14","15","16","17","18","19","1A","1B","1C","1D","1E","1F","20","21","22","23","24","25","26","27","28","29","2A","2B","2C","2D","2E","2F","30","31","32","33","34","35","36","37","38","39","3A","3B","3C","3D","3E","3F","40","41","42","43","44","45","46","47","48","49","4A","4B","4C","4D","4E","4F","50","51","52","53","54","55","56","57","58","59","5A","5B","5C","5D","5E","5F","60","61","62","63","64","65","66","67","68","69","6A","6B","6C","6D","6E","6F","70","71","72","73","74","75","76","77","78","79","7A","7B","7C","7D","7E","7F","80","81","82","83","84","85","86","87","88","89","8A","8B","8C","8D","8E","8F","90","91","92","93","94","95","96","97","98","99","9A","9B","9C","9D","9E","9F","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","AA","AB","AC","AD","AE","AF","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","BA","BB","BC","BD","BE","BF","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","CA","CB","CC","CD","CE","CF","D0","D1","D2","D3","D4","D5","D6","D7","D8","D9","DA","DB","DC","DD","DE","DF","E0","E1","E2","E3","E4","E5","E6","E7","E8","E9","EA","EB","EC","ED","EE","EF","F0","F1","F2","F3","F4","F5","F6","F7","F8","F9","FA","FB","FC","FD","FE","FF",[0]="00"}
	local thex={}
	for k,v in pairs(hex) do
		thex[v]=k
	end
	function tohex(str)
		local out=""
		for char in string.gmatch(str,".") do
			out=out..hex[string.byte(char)]
		end
		return out
	end
	function fromhex(str)
		local out=""
		while true do
			local char=string.sub(str,1,2)
			str=string.sub(str,3)
			out=out..string.char(thex[char])
			if #str==0 then
				break
			end
		end
		return out
	end
	local thash={[0]=0,1996959894,-301047508,-1727442502,124634137,1886057615,-379345611,-1637575261,249268274,2044508324,-522852066,-1747789432,162941995,2125561021,-407360249,-1866523247,498536548,1789927666,-205950648,-2067906082,450548861,1843258603,-187386543,-2083289657,325883990,1684777152,-43845254,-1973040660,335633487,1661365465,-99664541,-1928851979,997073096,1281953886,-715111964,-1570279054,1006888145,1258607687,-770865667,-1526024853,901097722,1119000684,-608450090,-1396901568,853044451,1172266101,-589951537,-1412350631,651767980,1373503546,-925412992,-1076862698,565507253,1454621731,-809855591,-1195530993,671266974,1594198024,-972236366,-1324619484,795835527,1483230225,-1050600021,-1234817731,1994146192,31158534,-1731059524,-271249366,1907459465,112637215,-1614814043,-390540237,2013776290,251722036,-1777751922,-519137256,2137656763,141376813,-1855689577,-429695999,1802195444,476864866,-2056965928,-228458418,1812370925,453092731,-2113342271,-183516073,1706088902,314042704,-1950435094,-54949764,1658658271,366619977,-1932296973,-69972891,1303535960,984961486,-1547960204,-725929758,1256170817,1037604311,-1529756563,-740887301,1131014506,879679996,-1385723834,-631195440,1141124467,855842277,-1442165665,-586318647,1342533948,654459306,-1106571248,-921952122,1466479909,544179635,-1184443383,-832445281,1591671054,702138776,-1328506846,-942167884,1504918807,783551873,-1212326853,-1061524307,-306674912,-1698712650,62317068,1957810842,-355121351,-1647151185,81470997,1943803523,-480048366,-1805370492,225274430,2053790376,-468791541,-1828061283,167816743,2097651377,-267414716,-2029476910,503444072,1762050814,-144550051,-2140837941,426522225,1852507879,-19653770,-1982649376,282753626,1742555852,-105259153,-1900089351,397917763,1622183637,-690576408,-1580100738,953729732,1340076626,-776247311,-1497606297,1068828381,1219638859,-670225446,-1358292148,906185462,1090812512,-547295293,-1469587627,829329135,1181335161,-882789492,-1134132454,628085408,1382605366,-871598187,-1156888829,570562233,1426400815,-977650754,-1296233688,733239954,1555261956,-1026031705,-1244606671,752459403,1541320221,-1687895376,-328994266,1969922972,40735498,-1677130071,-351390145,1913087877,83908371,-1782625662,-491226604,2075208622,213261112,-1831694693,-438977011,2094854071,198958881,-2032938284,-237706686,1759359992,534414190,-2118248755,-155638181,1873836001,414664567,-2012718362,-15766928,1711684554,285281116,-1889165569,-127750551,1634467795,376229701,-1609899400,-686959890,1308918612,956543938,-1486412191,-799009033,1231636301,1047427035,-1362007478,-640263460,1088359270,936918000,-1447252397,-558129467,1202900863,817233897,-1111625188,-893730166,1404277552,615818150,-1160759803,-841546093,1423857449,601450431,-1285129682,-1000256840,1567103746,711928724,-1274298825,-1022587231,1510334235,755167117}
	local bit_bxor,bit_brshift,bit_band,bit_bnot=bit.bxor,bit.brshift,bit.band,bit.bnot
	function hash(str)
		local h=-1
		for i=1,#str do
			h=bit_bxor(bit_brshift(h,8),thash[bit_band(bit_bxor(h,string.byte(str,i)),255)])
		end
		h=bit_bnot(h)
		local out=""
		for i=1,16 do
			out=out..hex[bit_band(bit_brshift(h,i*8),0xFF)]
		end
		return out
	end
	function salt()
		local out=""
		for l1=1,16 do
			out=out..hex[math.random(0,255)]
		end
		return out
	end
	function rawsalt(salt)
		local out=""
		for match in salt:gmatch("..") do
			out=out..string.char(tonumber("0x"..match))
		end
		return out
	end
	local function cipher(sMessage,state)
		local nCount=#sMessage
		local K={}
		for i=1,nCount do
			state.i=(state.i+1)%256
			state.j=(state.j+state.schedule[(state.i-1)%256])%256
			local t=state.schedule[state.i]
			state.schedule[state.i]=state.schedule[state.j]
			state.schedule[state.j]=t
			K[
				#K+1
			]=state.schedule[
				(
					state.schedule[
						(state.i-1)%256
					]+state.schedule[
						(state.j-1)%256
					]-1
				)%256
			]
		end
		local sOutput=""
		for i=1,nCount do
			sOutput=sOutput..string.char(bit.bxor(K[i],string.byte(sMessage,i)))
		end
		return sOutput
	end
	function newRC4(sKey)
		local nKeyLength=sKey:len()
		local tKey={string.byte(sKey,1,nKeyLength)}
		local tSch={}
		for i=0,255 do
			tSch[i]=i
		end
		local j=0
		for i=0,255 do
			j=(j+tSch[i]+tKey[(i%nKeyLength)+1])%256
			local t=tSch[i]
			tSch[i]=tSch[j]
			tSch[j]=t
		end
		local state={
			i=0,
			j=0,
			schedule=tSch
		}
		return function(sMessage)
			return cipher(sMessage,state)
		end,state
	end
end
local f={
	con={},
	pcon={},
	lcon={},
	chan=13000,
	id=os.getComputerID(),
	open=function(f,s)
		if not s then
			for k,v in pairs(peripheral.getNames()) do
				if peripheral.getType(v)=="modem" then
					f.m=peripheral.wrap(v)
					f.m_s=v
					f.m.open(f.chan)
					return
				end
			end
		end
		if peripheral.getType(s)=="modem" then
			f.m=peripheral.wrap(s)
			f.m_s=s
			f.m.open(f.chan)
		else
			error(s.." is not a modem!",2)
		end
	end,
	send=function(f,id,...)
		if not f.m then
			error(s.." no open modem!",2)
		elseif not f.con[id] then
			error("No open connection!",2)
		end
		f.m.transmit(f.chan,f.id,infutil.compress(1,id,tohex(f.con[id].encrypt(infutil.compress(...)))))
	end,
	broadcast=function(f,...)
		f:sendRaw(3,...)
	end,
	sendRaw=function(f,...)
		f.m.transmit(f.chan,f.id,infutil.compress(...))
	end,
	connect=function(f,id,pass,...)
		f.pcon[id]=pass
		f:sendRaw(3,id,"a1",...)
	end,
	auth=function(f,id,pass)
		f.lcon[id]={salt(),pass}
		f:sendRaw(3,id,"b1",f.lcon[id][1])
	end,
	decode=function(f,...)
		local p={...}
		if p[1]=="modem_message" and p[2]==f.m_s and p[3]==f.chan and p[5] then
			local d=infutil.decompress(p[5])
			if type(d)~="table" then
				return
			end
			if (type(d[2])~="number" and type(d[2])~="string") or type(d[3])~="string" then
				return
			end
			if d[2]~=f.id and d[1]~=2 then
				return
			end
			if d[1]==1 then
				if not f.con[p[4]] then
					return
				end
				local o=infutil.decompress(f.con[p[4]].decrypt(fromhex(d[3])))
				if not o then
					return
				end
				return p[4],o
			elseif d[1]==2 then
				if type(d[2])=="string" then
					return infutil.decompress(d[2])
				end
			elseif d[1]==3 then
				if d[3]=="a1" then
					if f.onRequest then
						f.onRequest(p[4],unpack(d,4))
					end
				elseif d[3]=="b1" then
					if type(d[4])~="string" then
						return
					elseif not f.pcon[p[4]] then
						return
					end
					f:sendRaw(3,p[4],"a2",hash(f.pcon[p[4]]..rawsalt(d[4])))
				elseif d[3]=="a2" and f.lcon[p[4]] then
					if d[4]==hash(f.lcon[p[4]][2]..rawsalt(f.lcon[p[4]][1])) then
						f.con[p[4]]={
							decrypt=newRC4(f.lcon[p[4]][2]),
							encrypt=newRC4(f.lcon[p[4]][2])
						}
						f.lcon[p[4]]=nil
						if f.onServerAuth then
							f.onServerAuth(p[4])
						end
						f:sendRaw(3,p[4],"b2",true)
					else
						if f.onServerFail then
							f.onServerFail(p[4])
						end
						f:sendRaw(3,p[4],"b2",false)
					end
				elseif d[3]=="b2" and f.pcon[p[4]] then
					if d[4] then
						f.con[p[4]]={
							decrypt=newRC4(f.pcon[p[4]]),
							encrypt=newRC4(f.pcon[p[4]])
						}
						f.pcon[p[4]]=nil
						if f.onClientAuth then
							f.onClientAuth(p[4])
						end
					else
						if f.onClientFail then
							f.conClientFail(p[4])
						end
					end
				end
			end
		end
	end,
}
function new()
	local out={}
	for k,v in pairs(f) do
		out[k]=v
	end
	return out
end